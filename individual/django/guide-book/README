Бесплатная платформа с открытым исходным кодом для создания веб приложений с помощью пайтон


Фреймворки пайтон:
Django
flask
fastapi

django помогает создавать веб сайты затрачивая меньше времени и меньше кода

компании, которые пользуются django: instagram, youtube, spotify, dropbox, yandex

множество компонентов django идет из "коробки". т.е не нужно самому писать всякие функции

особенности django: 
панель администратора
orm(object-reletional mapper)
аутентификация и авторизация
кэширование

ui


Как работают веб приложения? (Бэкенд, фронтенд, http и другое)
как мы сказали основная задача Джанго это создание веб-приложений. начнем с базовой концептов которые нам нужно понимать, 
чтобы создавать такие вы приложения. Мы хотим создать трекер для калорий. Но это может быть онлайн магазин
либо что-нибудь другое. У нас есть два базовых концепта это фронтенд и это Бэкенд.
frontent сущность которая отображается пользователю который видит пользователь то есть фронт и Бэкенд
та сущность которая содержит всю бизнес логику обрабатывает запросы и обычно пользователи не видит это бэк либо сервер.
допустим Сезим хочет отправить запрос на наш сервер и она это делает с помощью URL. URL(uniform resource locator) 
уникальный индификатор использования для поиска ресурсов в интернете его называют веб-адресом 
это может быть страница изображения видео PDF либо что-то другое. в момент когда Сезим что-то хочет клиент отправляет запрос 
на север которым защищен веб-сайт и говорит "Привет Сезим хочет увидеть домашнюю страницу" после этого веб-сервер должен 
обработать запрос и вернуть ответ. этот обмен данными выполняется с помощью протокола http The hypertext transfer protocol или 
протокол передачи данных гипертекста. он определяет как клиента сервер коммуницирует. обобщим. когда Сезим перемещается по нашему веб-сайту
для каждой страницы его браузер отправляет http запрос на сервер и получает http ответ. теперь как часть
создания северной части Для этого веб-сайта нам нужно решить как мы будем реагировать на пользователя, один из вариантов это сгенерировать запрошенную
страницу на сервере отправите к клиенту для этого мы используем HTML. HTML это язык гипертекстовой разметки простой
способ представления веб-страниц. каждый веб-страница которую увидели в интернете создается с помощью HTML, поэтому один из
вариантов сгенерировать страницу на сервере и вернуть html документ клиенту. другой вариант вернуть только данные
необходимые для заброшенной страницы с помощью некоторого API, и заставить клиента сгенерировать страницу самостоятельно. Потому что так мы сможем
помещать полную страницу или ответа HTML в документе это очень сложно. Поэтому
нужно возвращать только данные. если мы переложи ответственность на клиент мы сможем освободить сервер и он сможет
обслуживать больше клиентов наше приложение будет более масштабировано. это называется клиент-серверной архитектурой. и этот подход стал
общеотраслевой практикой. клиент может быть разным это может быть react angular vue либо что-нибудь другое это
фреймворки для создания фронтенд приложений а сервер либо бэкент может быть написано Джанго для языка поэтому и
с помощью другим языков для c# это может быть asp.net.core express либо что-то другое 

Что такое API?

вообще как создается API? на нашем сервере мы можем представить некоторые n поинты, с которыми
клиент может обращаться, для получения тех или иных фрагментов данных. например мы можем представить один n point для получения
списка продуктов в нашем интернет-магазине, другой для получения списка заказов, которые кто-то разместил
сейчас и все эти вместе с собой представляет интерфейс либо API, который клиент использует для общения с сервером.
технической точки зрения мы поговорим, что сервер представляет собой либо программный интерфейс приложения это
просто телевизора с помощью которого вы можете общаться с устройством точно
также можете общаться с сервером с помощью каких-то технических запросов и что тут важно понимать то что наш сервер
Мы создали на джанга создали API это универсальное программный интерфейс и То на чем построен клиент и как он работает
нам уже не важно потому что обычно у нашего веб-сервера несколько клиентов клиент может быть построен на реакте
либо на чистом GS это занимается фронтенд разработка это не часть нашего
курса мы этого практически не будем касаться нужно просто понимать то что вы даете правильный интерфейс этим уже
пользуются другие пользователи а фронтенд опять же пользователь вашего
а теперь давайте перейдем к написанию